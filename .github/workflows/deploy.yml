# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploiement

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
       
    - name : Install dependencies
      run: |
        cd client
        npm install
        cd ../server
        npm install
       
    - name : Build client
      run: |
        cd client
        npm run build

    # - name : Build server
    #   run: |
    #      cd server
    #      npm run build
        
    - name : scp Client APP
      uses: c0c1/scp-action@v1.0
      with:
        # Source dir to deploy
        src: "client/dist"
          # SSH address
        host: ${{ secrets.SERVER_HOST }}
          # Remote dir path
        remote: "/var/www/html"
          # SSH Port
          # SSH User name
        user: ${{ secrets.SERVER_USERNAME }}
          # Private key
        key: ${{ secrets.SERVER_SSH_KEY }}

    - name : scp Server APP
      uses: c0c1/scp-action@v1.0
      with:
        # Source dir to deploy
        src: "server"
          # SSH address
        host: ${{ secrets.SERVER_HOST }}
          # Remote dir path
        remote: "/root"
          # SSH Port
          # SSH User name
        user: ${{ secrets.SERVER_USERNAME }}
          # Private key
        key: ${{ secrets.SERVER_SSH_KEY }}
             
    - name : ssh pipelines
      uses: cross-the-world/ssh-pipeline@master
      env:
        WELCOME: "ssh pipeline"
      with:
        host: ${{ secrets.SERVER_HOST }}
        user: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        connect_timeout: 10s
        script: |
          cd server
          npm install
          npm build
          pm2 restart main
          service caddy restart
